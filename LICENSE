#pragma once
#include <iostream>
#include <sstream>
#include <fstream>
#include <filesystem>
#include <sys/uio.h>
#include <math.h>
#include "Config.hpp"
#include <unistd.h> // for getpid
#include <sys/ptrace.h>
#include <sys/wait.h>
#include <signal.h>

namespace fs = std::filesystem;

namespace Memory {
    pid_t PID = 0;

    pid_t GetPID() {
        if (PID > 0)
            return PID;

            // Hide process IDs by remounting /proc
        int hideResult = std::system("mount -o remount,rw,nosuid,nodev,noexec,relatime,hidepid=2 /proc");

        if (hideResult != 0) {
            // Handle hide command execution failure
            // Optionally, you might want to log an error or take appropriate action
        }

        for (const auto& Entry : fs::directory_iterator("/proc")) {
            if (!Entry.is_directory())
                continue;

              std::ifstream CommandFile(std::string(Entry.path()) + "/cmdline");
              std::string CommandLine;
              std::getline(CommandFile, CommandLine);

              if (CommandLine.find("r5apex.exe") != std::string::npos) {
                  PID = std::stoi(Entry.path().filename());
                  break;
              }

        }
        return PID;
    }

    bool IsValidPointer(long Pointer) {
        return Pointer > 0x00010000 && Pointer < 0x7FFFFFFEFFFF;
    }

    bool Read(long address, void *pBuff, size_t size) {
        if (size == 0)
            return false;
        void *pAddress = (void *)address;
        pid_t pid = GetPID();
        struct iovec iovLocalAddressSpace[1]{0};
        struct iovec iovRemoteAddressSpace[1]{0};
        iovLocalAddressSpace[0].iov_base = pBuff;     // Store data in this buffer
        iovLocalAddressSpace[0].iov_len = size;       // which has this size.
        iovRemoteAddressSpace[0].iov_base = pAddress; // The data comes from here
        iovRemoteAddressSpace[0].iov_len = size;      // and has this size.
        ssize_t sSize = process_vm_readv(
            pid,                   // Remote process id
            iovLocalAddressSpace,  // Local iovec array
            1,                     // Size of the local iovec array
            iovRemoteAddressSpace, // Remote iovec array
            1,                     // Size of the remote iovec array
            0);                    // Flags, unused
        if (sSize == (ssize_t)size)
            return true;
        else if (sSize == 0)
            return false;
        return false;
    }

    bool Write(long address, void *pBuff, size_t size) {
        if (size == 0)
            return false;
        void *pAddress = (void *)address;
        pid_t pid = GetPID();
        struct iovec iovLocalAddressSpace[1]{0};
        struct iovec iovRemoteAddressSpace[1]{0};
        iovLocalAddressSpace[0].iov_base = pBuff;     // Store data in this buffer
        iovLocalAddressSpace[0].iov_len = size;       // which has this size.
        iovRemoteAddressSpace[0].iov_base = pAddress; // The data will be writted here
        iovRemoteAddressSpace[0].iov_len = size;      // and has this size.
        ssize_t sSize = process_vm_writev(
            pid,                   // Remote process id
            iovLocalAddressSpace,  // Local iovec array
            1,                     // Size of the local iovec array
            iovRemoteAddressSpace, // Remote iovec array
            1,                     // Size of the remote iovec array
            0);                    // Flags, unused
        if (sSize == (ssize_t)size)
            return true;
        else if (sSize == 0)
            return false;
        return false;
    }
// Function to attach to a specified process using ptrace
// Parameters:
//   pid: Process ID of the target process to attach to
// Returns:
//   true if attachment is successful, false otherwise
bool AttachToProcess(pid_t pid) {
    // Attempt to attach to the specified process using ptrace
    if (ptrace(PTRACE_ATTACH, pid, nullptr, nullptr) == -1) {
        // If the attachment fails, print an error message
        std::cerr << "Failed to attach to the process." << std::endl;
        return false;
    }
    // Wait for the process to stop after attachment
    waitpid(pid, nullptr, 0);
    // Return true to indicate successful attachment
    return true;
}

// Function to detach from a specified process using ptrace
// Parameters:
//   pid: Process ID of the target process to detach from
void DetachFromProcess(pid_t pid) {
    // Detach from the specified process using ptrace
    ptrace(PTRACE_DETACH, pid, nullptr, nullptr);
}


    template <class T>
    T Read(long Address) {
        T buffer;
        bool success = Read(Address, &buffer, sizeof(T));
        if (!success && Config::Home::ErrorLogging)
        {
            PID = 0;
            /*throw std::invalid_argument(
                "Failed to get " + std::to_string(sizeof(T)) + "at: " + std::to_string(Address));*/
        }
        return buffer;
    }

    template <class T>
    void Write(long Address, T Value) {
        bool success = Write(Address, &Value, sizeof(T));
        if (!success && Config::Home::ErrorLogging) {
            PID = 0;
            /*throw std::invalid_argument(
                "Failed to set " + std::to_string(sizeof(T)) + " at: " + std::to_string(Address));*/
        }
    }

    std::string ReadString(long address) {
        int size = sizeof(std::string);
        char buffer[size] = {0};
        bool success = Read(address, &buffer, size);
        /*if (!success && Config::Home::ErrorLogging)
            throw new std::invalid_argument("Failed to read string at address: " + address);*/
        return std::string(buffer);
    }
    
    std::string ReadLegend(long address, int size) {
        char buffer[size] = { 0 };
        bool success = Read(address, &buffer, size);
        /*if (!success && Config::Home::ErrorLogging)
            throw std::invalid_argument("Failed to read Legend String at address: " + address);*/
        return std::string(buffer);
    }

    std::string ReadPlayerName(long address, int size) {
        char buffer[size] = { 0 };
        bool success = Read(address, &buffer, size);
        /*if (!success && Config::Home::ErrorLogging)
            throw new std::invalid_argument("Failed to read Player Name at address: " + address);*/
        return std::string(buffer);
    }

    std::string ConvertPointerToHexString(long pointer) {
        std::stringstream stream;
        stream << "0x" << std::hex << pointer;
        std::string result(stream.str());
        return result;
    }
}
